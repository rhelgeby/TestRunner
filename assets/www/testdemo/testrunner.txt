Test Runner - Usage
===================

TODO: This chapter will be outdated and needs to be rewritten after improvements
      in Test Runner is finished.

Requirements:
* HTML5 Web Storage (the test state between pages is saved here)


Creating Tests
--------------

Tests are defined in TestCase objects. Each test case has a name and URL where
the test is executed.

In case a test will change the page, the test source code is divided into
phases. A new pahase starts if the page is changed. Each test is required to
have at least one phase.

Phases are functions stored in an array that's passed to the TestCase
constructor.

Summary:
1. Make a JavaScript-file for storing test source code. 
2. Create a array for storing test cases.
3. Construct TestCase objects and add them to the test collection array.

Example:
tests =
[
	new TestCase("test1", "index.html",
	[
		function()
		{
			console.log("Phase 1 of test1 executed.");
		}
	]),
	
	new TestCase("testPageSwitch", "index.html",
    [
        function()
        {
            console.log("Changing page...");
            window.location.href = "page2.html";
        },
        function()
        {
            var element = document.getElementById("page2");
            
            if (!element)
            {
                throw "Element 'page2' not found.";
            }
        }
    ])
];


Installation
------------

Test Runner is installed by including its source in every page in the
application (at minimum in every page that tests use). Including the test
source file is also required (every page it's used).

Example:
<script type="text/javascript" charset="utf-8" src="test_runner.js"></script>
<script type="text/javascript" charset="utf-8" src="test_main.js"></script>


Running Tests
-------------

Construct a new TestRunner object with the test source array as a parameter.
Eventually it also accepts a HTML element where results are written, and
function references to "before" and "after" functions.

Use the run() function of TestRunner to start the tests.

The code that constructs and start a TestRunner may be used in a onload event
to automatically start tests when the page is loaded.


Example:
testRunner = new TestRunner(tests, document.getElementById("results"));
testRunner.run();


Test Runner - Technical Description
===================================

Goals
-----

* Automatic. No user interaction should be required (except for starting the
  application).

* Based on web technologies (HTML5, JavaScript). Makes it platform independent.
  Lives in the web browser.

* Suitable for function tests in web GUIs as well as regular unit tests.

* Embedded with application, easy to remove when deploying. Avoids complicated
  protocols and communication methods.

* Compatible with PhoneGap. Designed for use with PhoneGap, but does not depend
  on it.


How Test Runner Works
---------------------

Test Runner is a tool for running automatic unit tests and function tests in
web applications. It's written in JavaScript and embedded with the application.

PHASES
In contrast to regular test cases in other tools, Test Runner support multiple
phases per tests. Test phases are required when tests need to change the page,
such as writing text in form fields, submitting and then verifying the result
in another page. If any phase fail to complete, the test will fail.

SAVING STATE
Scripts in web pages are terminated when the page is changed. To be able to
continue testing the test runner state must be saved. The state is serialized
in JSON format, then saved as a string in a session variable by using the Web
Storage feature of HTML5.

INITIALIZING TEST RUNNER
The developer has to build tests and construct a test runner object before
starting tests. Test cases are stored in an array of TestCase objects. This
array is passed to the TestRunner constructor.

STARTING TEST RUNNER
When any page is loaded, the test runner should be initialized and started.
Eventually a delayed start through a event or timer is required for PhoneGap
to finish initializing first.

Once the test runner is started it will check if there's an active test session
and resume its state. If not it will start a new one. Then it will loop through
tests not yet exectued.


